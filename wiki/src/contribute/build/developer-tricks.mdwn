[[!meta title="Developer tricks"]]

[[!toc]]

<div class="caution">
Tricks mentioned here are only intended for <strong>development</strong>. Please don't use them in your
regular Tails!
</div>

# Kernel command line options

 - `early_patch`: see [[contribute/build/early-patch]]
 - `login`: skip the greeter, using the default options

 - `rootpw` set the root password (not the amnesia password)

 - `break=init` stop boot before starting the init and give you a shell. Useful for small customizations that
   must be done before boot.
   If you need to do the same thing over and over, consider using [[contribute/build/early-patch]] instead

# Refresh patches

Sometimes, Tails FTBFS because of problems applying patches. Here is how you could fix that:

```sh
export TAILS_BUILD_OPTIONS="${TAILS_BUILD_OPTIONS:-} rescue"
rake build
rake vm:ssh
export PATCHING_FILE='/path/to/file/'
sudo PATCHING_FILE="${PATCHING_FILE}" chroot "$(ls /tmp/tails-build.* -dt|head -n1)/chroot/"
```

Set `PATCHING_FILE` to the file Tails is trying to patch. For example, it could be `/usr/share/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/uBlock0@raymondhill.net/js/background.js`

```sh
cp "${PATCHING_FILE}.orig" "${PATCHING_FILE}"
sensible-editor "${PATCHING_FILE}"
diff -u "${PATCHING_FILE}.orig" "${PATCHING_FILE}"
```

copy-paste the output into `config/chroot-local_includes${PATCHING_FILE}`

Edit the patch, removing `.orig` from the first line:

```sh
sensible-editor "config/chroot-local_includes${PATCHING_FILE}"
git add "config/chroot-local_includes${PATCHING_FILE}"
```

# Run iso from commandline

as you not always want to click you through virt-maanger you can use qemu/kmv directly:

```sh
kvm -m 2048 -cdrom <ISO NAME>.iso
```

you can even share a directoy with the client system:

```sh
kvm -m 2048 -virtfs local,path=/path/to/file,security_model=passthrough,mount_tag=src --cdrom /path/to/tails.iso
```

The shared directory can be used as `early_patch` source (needs the hook script in the directory) or you can mount it in the client (you need to set an adminstrator password):

```sh
sudo mount -t 9p -o trans=virtio src /mnt/
```

# Use the remote shell

It may be very handsome to have a propper shell in your tested iso. To do so you need to add `autotest_never_use_this_option` to the kernel commandline.

TODO: You also need to add the virtio channel device.

After the iso has started you can now connect to the socket and communicate with your iso.
Here an example how to use in Python:

```py
import json
import socket


client = socket.socket( socket.AF_UNIX, socket.SOCK_STREAM )
client.connect("/path/to/remote-shell.socket")

id = 1
_type = "sh_call"
env = {}
user = "root"
cmd = "echo 'huhu?"
data = [id, _type, user, env, cmd]
client.send(json.dumps(data).encode()+b"\n")

answer = json.loads(client.recv(1024).decode())
print(answer)
>>> '[1, "success", 1, "huhu?", ""]\n'

```

For more information you have to look into the source of the remote shell:

[[!tails_gitweb config/chroot_local-includes/usr/local/lib/tails-autotest-remote-shell]]

