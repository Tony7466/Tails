#!/usr/bin/env python3

import os
import sys
from argparse import ArgumentParser
import re

from tailslib.django import safe_join
from tailslib.systemd import tor_has_bootstrapped

WEBSITE_URL = "https://tails.net"
WEBSITE_LOCAL_PATH = "/usr/share/doc/tails/website"
LANG_CODE = os.getenv("LANG", "en")[0:2]


ALREADY_LOCALIZED = re.compile(r'/index.[a-z][a-z].html$')
def sanitize_page_uri(page: str) -> str:
    """
    A relative link is passed through
    >>> sanitize_page_uri("contribute/release_process")
    'contribute/release_process'

    A link to the website is made relative
    >>> sanitize_page_uri("https://tails.net/install/")
    'install'

    Localized links are de-localized
    >>> sanitize_page_uri("https://tails.net/install/index.de.html")
    'install'
    """
    page = page.removeprefix(WEBSITE_URL + '/')
    m = ALREADY_LOCALIZED.search(page)
    if m is not None:
        page = page.removesuffix(m.group(0))
    page = page.removesuffix('/')
    return page


def find_local_page(page: str) -> str:
    for lang_code in (LANG_CODE, "en", None):
        local_page = get_local_path(page, lang_code)
        if os.path.isfile(local_page):
            return "file://" + local_page
    return ""


def get_local_path(page, lang_code: str) -> str:
    if lang_code:
        return safe_join(WEBSITE_LOCAL_PATH, page + "." + lang_code + ".html")
    else:
        return safe_join(WEBSITE_LOCAL_PATH, page + ".html")


def get_parser():
    p = ArgumentParser()
    p.add_argument("--force-local", default=False, action="store_true")
    p.add_argument("--doctest", default=False, action="store_true")
    p.add_argument("--dry-run", default=False, action="store_true")
    p.add_argument("page", default="doc", nargs="?")
    p.add_argument("anchor", default=None, nargs="?")
    return p


def parse_args(_args=None):
    """

    >>> parse_args([]).page
    'doc'
    >>> parse_args([]).anchor is None
    True

    >>> parse_args(['foo']).page
    'foo'
    >>> parse_args(['foo']).anchor is None
    True

    >>> parse_args(['foo', 'bar']).page
    'foo'
    >>> parse_args(['foo', 'bar']).anchor
    'bar'

    >>> parse_args(['--force-local', 'foo', 'bar']).page
    'foo'
    >>> parse_args(['--force-local', 'foo', 'bar']).anchor
    'bar'
    """
    return get_parser().parse_args(_args)


def main():
    args = parse_args()
    page = sanitize_page_uri(args.page)
    anchor = args.anchor

    if args.doctest:
        import doctest
        ret = doctest.testmod(verbose=False)
        print('tails-documentation doctest:', ret)
        if ret.failed:
            sys.exit(1)
        else:
            sys.exit(0)
        return

    # If possible, let's hand-off to our website, which should be the most
    # up-to-date option.
    if not args.force_local and tor_has_bootstrapped():
        # Open page in the user-configured language, if available
        if os.path.isfile(get_local_path(page, LANG_CODE)):
            uri = WEBSITE_URL + "/" + page + "/index." + LANG_CODE + ".html"
        else:
            uri = WEBSITE_URL + "/" + page
    else:
        uri = find_local_page(page)
        if not uri:
            sys.exit("error: could not find the requested documentation page")

    if anchor:
        uri = uri + "#" + anchor

    if args.dry_run:
        print(uri)
        return

    os.environ["TOR_BROWSER_SKIP_OFFLINE_WARNING"] = "yes"
    os.execv("/usr/bin/gtk-launch", ["/usr/bin/gtk-launch", "org.boum.tails.TorBrowser.desktop", uri])


if __name__ == "__main__":
    main()
