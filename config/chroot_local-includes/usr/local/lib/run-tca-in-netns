#!/usr/bin/python3
import argparse
import logging
import os
import sys
from pathlib import Path
import socket

import tailslib.fd
from tailslib.netnsdrop import run_in_netns
from tailslib.persistence import (
    has_persistence,
    has_unlocked_persistence,
)

A11Y_BUS_PROXY_PATH="/run/user/1000/.dbus-proxy/a11y-bus-proxy.sock"
IBUS_PROXY_PATH="/run/user/1000/.dbus-proxy/ibus-proxy.sock"
A11Y_BUS_SANDBOX_PATH="/run/user/1000/tails-sandbox/a11y-bus-proxy.sock"
IBUS_SANDBOX_PATH="/run/user/1000/tails-sandbox/ibus-proxy.sock"
NETNS = "tca"


def main():
    python_bin = "/usr/bin/python3"
    program = "/usr/lib/python3/dist-packages/tca/application.py"

    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", action="store_true",
                        default=(os.getenv("DEBUG") or "debug" in Path("/proc/cmdline").read_text().split())
                        )
    parser.add_argument("ENV_FILE")
    args = parser.parse_args()

    # Set up logging
    log_level = logging.DEBUG if args.debug else logging.INFO
    log_format = "%(levelname)s:%(filename)s:%(lineno)d: %(message)s"
    logging.basicConfig(level=log_level, format=log_format)

    confdir = Path("/var/lib/tca/")
    conffile = confdir / "tca.conf"
    confdir.mkdir(mode=0o700, exist_ok=True)
    confdir.chmod(0o700)
    conffile.touch(mode=0o600)

    statedir = Path("/run/tca/")
    statefile = statedir / "tca.state"
    statedir.mkdir(mode=0o700, exist_ok=True)
    statedir.chmod(0o700)
    statefile.touch(mode=0o600)

    portalsock = "/run/tca-portal.sock"

    statefile_fd = tailslib.fd.open_file(statefile, os.O_RDWR)
    portalsock_fd = tailslib.fd.connect_socket(socket.AF_UNIX, portalsock)
    os.environ["INHERIT_FD"] = f"{statefile_fd},{portalsock_fd}"

    tca_cmd = [
        python_bin,
        program,
        *sys.argv[1:],
    ]
    if has_persistence():
        tca_cmd.append("--has-persistence")
    if has_unlocked_persistence():
        tca_cmd.append("--has-unlocked-persistence")

    # TODO: Use `sudo --close-from` in run_in_netns to close all
    # file descriptors except the ones we want to inherit.
    run_in_netns(*tca_cmd, netns=NETNS, env_file=args.ENV_FILE)


if __name__ == "__main__":
    main()
